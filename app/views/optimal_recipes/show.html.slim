h1 Optimal Recipe

- if @recipe
  table.table.table-bordered.optimal-recipes
    thead
      tr
        th.ingredient-name Ingredient
        th Serving size
        th Container size
        th.end-of-basic-columns Daily serving
        th Cost
        - @recipe.nutrients.each do |nutrient|
          th(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
            = "#{nutrient.humanized_name} (#{unit_for(nutrient.name)})"
    tbody
      - @recipe.ingredients_with_daily_servings.each do |ingredient|
        tr.non-important
          th.ingredient-name= ingredient.name
          td
          td
          td.end-of-basic-columns
          td= currency ingredient.cost
          - @recipe.nutrients.each do |nutrient|
            td(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
              = round ingredient.value_for_nutrient(nutrient)
        tr.non-important
          th.ingredient-name= "#{ingredient.name} (normalized)"
          td= "#{integer ingredient.serving_size} #{ingredient.unit}"
          td= "#{integer ingredient.container_size} #{ingredient.unit}"
          td.end-of-basic-columns
          td= currency ingredient.normalized_cost
          - @recipe.nutrients.each do |nutrient|
            td(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
              = round ingredient.normalized_value_for_nutrient(nutrient)
        tr
          th.ingredient-name= "#{ingredient.name} (multiplied)"
          td
          td
          td.end-of-basic-columns= "#{integer ingredient.daily_serving} #{ingredient.unit}"
          td= currency ingredient.multiplied_cost
          - @recipe.nutrients.each do |nutrient|
            td(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
              = round ingredient.multiplied_value_for_nutrient(nutrient)
      tr.total-row
        th.ingredient-name Total
        td
        td
        td.end-of-basic-columns
        td= currency @recipe.total_multiplied_cost
        - @recipe.nutrients.each do |nutrient|
          td(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
            = round @recipe.total_multiplied_value_for_nutrient(nutrient)
      tr
        th.ingredient-name Min target
        td
        td
        td.end-of-basic-columns
        td
        - @recipe.nutrients.each do |nutrient|
          td(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
            = float_or_na @recipe.nutrient_profile.min_value_for_nutrient(nutrient)
      tr
        th.ingredient-name Max target
        td
        td
        td.end-of-basic-columns
        td
        - @recipe.nutrients.each do |nutrient|
          td(class="#{nutrient_completeness_score_class(@recipe, nutrient)}")
            = float_or_na @recipe.nutrient_profile.max_value_for_nutrient(nutrient)
      tr
        th.ingredient-name % reached
        td
        td
        td.end-of-basic-columns
        td
        - @recipe.nutrients.each do |nutrient|
          td(class="#{nutrient_completeness_score_class(@recipe, nutrient)} completeness-score")
            = percentage_or_na @recipe.max_completeness_score_for_nutrient(nutrient)
- else
  p No optimal recipe exists.
